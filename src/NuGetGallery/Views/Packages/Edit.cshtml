@model EditPackageRequest
@{
    ViewBag.Title = "Editing: " + Model.PackageTitle + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/TwoColumnLayout.cshtml";
}

@section BottomScripts {
    <script>
        $('#EditPackageVersionRequest_IconUrl').focusout(function (event) {
            var target = event.target;
            var newValue = event.target.value;
            $('#IconUrl_Preview').remove();
            if (newValue.trim().length) {
                $(target).after($('<img class="logo" id="IconUrl_Preview" alt="Icon Preview" src="' + encodeURI(newValue) + '"></img>'))
            }
        });

        $(function () {
            var form = $('#EditForm').toArray()[0];
            $("input[type=url]").bind("focusin focusout keyup", function (event) {
                var target = $(event.target);
                var validator = $.data(form, "validator"),
                    eventType = "on" + event.type.replace(/^validate/, "");
                validator.settings[eventType] && validator.settings[eventType].call(validator, event.target);
            });
        });

        $(function () {
            var initialDictionary = [];
            function ReadFormValues(dictionary) {
                $("textarea").each(function () {
                    dictionary[this.id] = this.value;
                });
                $("input:text").each(function () {
                    dictionary[this.id] = this.value;
                });
                $("input:radio").each(function () {
                    dictionary[this.id] = this.checked;
                });
                $("input:checkbox").each(function () {
                    dictionary[this.id] = this.checked;
                });
            };
            ReadFormValues(initialDictionary);
            $("a").click(function () {
                var dictionary = [];
                ReadFormValues(dictionary);
                for (var key in initialDictionary) {
                    if (initialDictionary.hasOwnProperty(key) &&
                        dictionary[key] != initialDictionary[key]) {
                        return confirm('Your changes have not yet been saved. Press OK to discard your changes.');
                    }
                }
            });
        });
    </script>
}

@section SideColumn {
    @{
        var isRootSelected = Model.Version == null;
        <nav id="edit-list">
            <h2>Editing</h2>
            <span class="edit-root">
                @(Model.PackageId)
            </span>
            <ul id="packageVersions">
            @foreach (var version in Model.PackageVersions)
            {
                var versionStr = version.Version;
                var isSelected = string.Equals(Model.Version, versionStr, StringComparison.OrdinalIgnoreCase);
                <li>
                    <span class="@(isSelected ? "edit-tree-selected" : "edit-tree")">
                        @if (isSelected)
                        {
                            <text>@(versionStr)</text>
                        }
                        else
                        {
                            <a href="@Url.EditPackage(Model.PackageId, versionStr)" >@(versionStr)</a>
                        }
                        @if (!version.Listed)
                        {
                            <text>(unlisted)</text>
                        }
                        @if (version.IsLatest)
                        {
                            <text>(latest)</text>
                        }
                        else if (version.IsLatestStable)
                        {
                            <text>(latest stable)</text>
                        }
                    </span>
                </li>
            }
            </ul>
        </nav>
    }
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "EditForm" }))
{
    if (Model.EditPackageVersionRequest != null)
    {
        <fieldset class="form">
            <legend>Edit Version @(Model.Version)</legend>
            
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @(Html.EditorFor<EditPackageRequest, EditPackageVersionRequest>(model => model.EditPackageVersionRequest))
        </fieldset>
        <input type="submit" value="Save" title="Save" />
    }
}

<h2>Note:</h2>
<p>
    NuGet only allows you to update the package's description. To edit package dependencies, target frameworks, 
    license URL, you must upload a new version of the package. Also, note that changes to package Icon, Title, and Summary 
    may take a long time before they are visibly changed in package search results, since the package must be re-indexed.
</p>
