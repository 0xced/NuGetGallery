@model ManageCredentialsViewModel
@{
    ViewBag.Title = "Manage Credentials";
    var credGroups = Model.Credentials.GroupBy(c => c.Kind).ToDictionary(g => g.Key, g => g.ToList());

    CredentialViewModel apiKey = null;
    if(credGroups.ContainsKey(CredentialKind.Token)) {
        apiKey = credGroups[CredentialKind.Token].Single();
    }
    
    var hasPassword = credGroups.ContainsKey(CredentialKind.Password);

    var loginCredentials = hasPassword ? 1 : 0;
    if(credGroups.ContainsKey(CredentialKind.External)) 
    {
        loginCredentials += credGroups[CredentialKind.External].Count;
    }
}

<h1 class="page-heading">Manage Credentials</h1>

@if(credGroups.ContainsKey(CredentialKind.External)) {
    <h2>External Account Credentials</h2>
    <p>These are credentials from external services</p>
    <ul id="managecreds-external-list">
        @foreach (var cred in credGroups[CredentialKind.External])
        {
            <li class="managecreds-external-cred @(cred.AuthUI == null ? null : cred.AuthUI.CssClass)">
                <div class="managecreds-external-cred-caption">@cred.TypeCaption</div>
                <div class="managecreds-external-cred-id">@cred.Identity</div>
                @if(loginCredentials > 1) {
                    using (Html.BeginForm("RemoveCredential", "Users", new { credentialType = cred.Type }))
                    {
                        <fieldset class="form">
                            <legend>Remove @cred.TypeCaption Credential</legend>
                            @Html.AntiForgeryToken()
                            @Html.Hidden(cred.Type)
                            <input type="submit" value="Remove" />
                        </fieldset>
                    }
                }
            </li>
        }
    </ul>
}

<h2>Password</h2>
@using (Html.BeginForm("ChangePassword", "Users"))
{
    <fieldset class="form">
        <legend>@(hasPassword ? "Change Password" : "Set a Password")</legend>
        @Html.AntiForgeryToken()
        @if (hasPassword)
        {
            <p>Change your password using the form below.</p>
            <div class="form-field">
                @Html.LabelFor(m => m.OldPassword)
                @Html.PasswordFor(m => m.OldPassword)
                @Html.ValidationMessageFor(m => m.OldPassword)
            </div>

            <div class="form-field">
                @Html.LabelFor(m => m.NewPassword)
                @Html.PasswordFor(m => m.NewPassword)
                @Html.ValidationMessageFor(m => m.NewPassword)
            </div>
            <input type="submit" value="Change Password" />
        }
        else if(Model.UserConfirmed)
        {
            <p>If you want to set a password, we need to confirm your email address. Click the button below and we'll email you a link that you can use to set your password.</p>
            <input type="submit" value="Request Password Set Email" />
        } 
        else 
        {
            <p>In order to set a password you must <a href="@Url.ConfirmationRequired()">confirm your email address.</a></p>
        }

    </fieldset>
}
@if (hasPassword && loginCredentials > 1)
{
    using (Html.BeginForm("RemovePassword", "Users"))
    {
        <fieldset class="form">
            <legend>Remove Password</legend>
            @Html.AntiForgeryToken()
            <p>Since you have external accounts configured, you can choose to remove your password entirely. Note that once removed, your password is <strong>unrecoverable</strong>.</p>
            <input type="submit" value="Remove password" />
        </fieldset>
    }
}

<h2>API Key</h2>
@if (!Model.UserConfirmed)
{
    <p>
        Your API key provides you with a token that can identify you to the gallery. The
        <a href="http://nuget.codeplex.com/">NuGet</a> command-line utility allows you to
        submit a NuGet package to the gallery using your API key to authenticate.
        To get an API Key you will need to <a href="@Url.ConfirmationRequired()">confirm your account.</a>
    </p>
}
else
{
    <p>
        Your API key provides you with a token that identifies you to the gallery.
        Keep this a secret. You can always regenerate your key at any time (invalidating
        previous keys) if your token is accidentally revealed. The
        <a href="http://nuget.codeplex.com/">NuGet</a> command-line utility allows you to
        submit a NuGet package to the gallery, and you would pass your token like this:
    </p>

    <div id="generateKey">
        @if(apiKey == null) {
            <h3>You don't have an API Key</h3>
            <p>Click the button below to generate one</p>
            <fieldset class="form">
                <legend>Generate New API Key</legend>
                @using (Html.BeginForm("GenerateApiKey", "Users", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <input type="submit" value="Generate New API Key" />
                }
            </fieldset>
        } else {
            <h3>Your API key is:</h3>

            <div id="apiKey">
                <p>
                    <span id="key">@apiKey.Value</span>
                    @* Why width=0, height=0 for the object tag? See the script below *@
                    <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
                            width="110"
                            height="14"
                            id="clippy"
                            aria-hidden="true"
                            role="presentation">
                        <param name="movie" value="@Url.Content("~/Content/clippy.swf")">
                        <param name="allowScriptAccess" value="always" />
                        <param name="quality" value="high" />
                        <param name="scale" value="noscale" />
                        <param name="FlashVars" value="text=@apiKey.Value">
                        <param name="bgcolor" value="#fff">
                        <embed src="@Url.Content("~/Content/clippy.swf")"
                               width="110"
                               height="14"
                               aria-hidden="true"
                               role="presentation"
                               name="clippy"
                               quality="high"
                               allowscriptaccess="always"
                               type="application/x-shockwave-flash"
                               pluginspage="http://www.macromedia.com/go/getflashplayer"
                               flashvars="text=@apiKey.Value"
                               bgcolor="#fff" />
                    </object>
                </p>

                <fieldset class="form">
                    <legend>Generate New API Key</legend>
                    @using (Html.BeginForm("GenerateApiKey", "Users", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <input type="submit" value="Generate New API Key" />
                    }
                </fieldset>

                <h4>Example usage:</h4>
                <p>
                    <pre>
        nuget.exe setApiKey @apiKey.Value
        nuget.exe push MyPackage.1.0.nupkg</pre>
                </p>
            </div>
        }
    </div>
}