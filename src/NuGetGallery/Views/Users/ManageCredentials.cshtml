@model ManageCredentialsViewModel
@{
    ViewBag.Title = "Manage Credentials";
    var credGroups = Model.Credentials.GroupBy(c => c.Kind).ToDictionary(g => g.Key, g => g.ToList());

    CredentialViewModel apiKey = null;
    if (credGroups.ContainsKey(CredentialKind.Token))
    {
        apiKey = credGroups[CredentialKind.Token].Single();
    }

    var hasPassword = credGroups.ContainsKey(CredentialKind.Password);

    var loginCredentials = hasPassword ? 1 : 0;
    if (credGroups.ContainsKey(CredentialKind.External))
    {
        loginCredentials += credGroups[CredentialKind.External].Count;
    }
}

<h1 class="page-heading">Manage Credentials</h1>

<h2>Credentials</h2>
<p>These are the credentials you can use to log in to your NuGet.org account or push packages</p>
<ul id="managecreds-list">
    @if (credGroups.ContainsKey(CredentialKind.External))
    {
        foreach (var cred in credGroups[CredentialKind.External])
        {
            <li class="managecreds-cred">
                <div class="managecreds-cred-actions">
                    @if (loginCredentials > 1)
                    {
                        using (Html.BeginForm("RemoveCredential", "Users", new { credentialType = cred.Type }, FormMethod.Post, new { @class = "form-inline" }))
                        {
                            <fieldset class="form">
                                <legend>Remove @cred.TypeCaption Credential</legend>
                                @Html.AntiForgeryToken()
                                @Html.Hidden(cred.Type)
                                <button class="btn btn-inline s-confirm" type="submit" data-confirm="Are you sure you want to disassociate your @cred.AuthUI.AccountNoun? This is an irreversable action!">Remove</button>
                            </fieldset>
                        }
                    }
                </div>
                <span class="managecreds-cred-caption">
                    @cred.TypeCaption
                </span>
                <span class="managecreds-cred-id">@cred.Identity</span>
            </li>
        }
    }
    <li class="managecreds-cred @(hasPassword ? null : "managecreds-cred-disabled")">
        <div class="managecreds-cred-actions">
            @if (hasPassword)
            {
                <a href="#" class="btn btn-inline s-expand" data-target="#managecreds-cred-changepassword" data-toggletext="@(ViewData.ModelState.IsValid ? "Cancel" : "Change")">@(ViewData.ModelState.IsValid ? "Change" : "Cancel")</a>
                if (loginCredentials > 1)
                {
                    using (Html.BeginForm("RemovePassword", "Users", FormMethod.Post, new { @class = "form-inline" }))
                    {
                        <fieldset class="form">
                            <legend>Remove Password</legend>
                            @Html.AntiForgeryToken()
                            <button class="btn btn-inline s-confirm" type="submit" data-confirm="Are you sure you want to remove your password? This is an irreversable action!">Remove</button>
                        </fieldset>
                    }
                }
            }
            else
            {
                using (Html.BeginForm("ChangePassword", "Users", FormMethod.Post, new { @class = "form-inline" }))
                {
                    <fieldset class="form">
                        <legend>Enable Password</legend>
                        @Html.AntiForgeryToken()
                        <button class="btn btn-inline" type="submit">Enable</button>
                    </fieldset>
                }
            }
        </div>
        <span class="managecreds-cred-caption">
            @(hasPassword ? "Password" : "Password Login Disabled")
        </span>
        <div id="managecreds-cred-changepassword" class="@(ViewData.ModelState.IsValid ? "s-hidden" : null)">
            @using (Html.BeginForm("ChangePassword", "Users"))
            {
                <fieldset id="managecreds-cred-changepassword-fieldset" class="form">
                    <legend>Change Password Form</legend>

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <div class="form-field">
                        @Html.LabelFor(m => m.OldPassword)
                        @Html.PasswordFor(m => m.OldPassword)
                        @Html.ValidationMessageFor(m => m.OldPassword)
                    </div>

                    <div class="form-field">
                        @Html.LabelFor(m => m.NewPassword)
                        @Html.PasswordFor(m => m.NewPassword)
                        @Html.ValidationMessageFor(m => m.NewPassword)
                    </div>

                    <img src="@Url.Content("~/content/images/required.png")" alt="Blue border on left means required." />

                    <input type="submit" value="Change" title="Change password" />
                </fieldset>
            }
        </div>
    </li>
    <li class="managecreds-cred @(apiKey == null ? "managecreds-cred-disabled" : null)">
        <div class="managecreds-cred-actions">
            <a href="#" class="managecreds-moreinfo-button s-expand" data-target="#managecreds-cred-apikeyinfo" data-toggletext="Less Info">More Info</a>
            @if (Model.UserConfirmed)
            {
                using (Html.BeginForm("GenerateApiKey", "Users", FormMethod.Post, new { @class = "form-inline" }))
                {
                    <fieldset class="form">
                        <legend>@(apiKey == null ? "Generate an API Key" : "Generate a new API Key")</legend>
                        @Html.AntiForgeryToken()
                        <button class="btn btn-inline" type="submit">@(apiKey == null ? "Generate" : "Reset")</button>
                    </fieldset>
                }
            }
        </div>
        <span class="managecreds-cred-caption">
            API Key:
            @if (!Model.UserConfirmed)
            {
                <text>You need to <a href="@Url.ConfirmationRequired()">confirm your account</a> before viewing your API Key</text>
            }
            else if (apiKey == null)
            {
                <text>You don't have an API key</text>
            }
            else
            {
                <span id="key">@apiKey.Value</span>
                <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
                        width="110"
                        height="14"
                        id="clippy"
                        aria-hidden="true"
                        role="presentation">
                    <param name="movie" value="@Url.Content("~/Content/clippy.swf")">
                    <param name="allowScriptAccess" value="always" />
                    <param name="quality" value="high" />
                    <param name="scale" value="noscale" />
                    <param name="FlashVars" value="text=@apiKey.Value">
                    <param name="bgcolor" value="#eff7fa">
                    <embed src="@Url.Content("~/Content/clippy.swf")"
                           width="110"
                           height="14"
                           aria-hidden="true"
                           role="presentation"
                           name="clippy"
                           quality="high"
                           allowscriptaccess="always"
                           type="application/x-shockwave-flash"
                           pluginspage="http://www.macromedia.com/go/getflashplayer"
                           flashvars="text=@apiKey.Value"
                           bgcolor="#eff7fa" />
                </object>
            }
        </span>
        <div id="managecreds-cred-apikeyinfo" class="s-hidden">
            @if (!Model.UserConfirmed)
            {
                <p>
                    Your API key provides you with a token that can identify you to the gallery. The
                    <a href="http://nuget.codeplex.com/">NuGet</a> command-line utility allows you to
                    submit a NuGet package to the gallery using your API key to authenticate.
                    To get an API Key you will need to <a href="@Url.ConfirmationRequired()">confirm your account.</a>
                </p>
            }
            else if(apiKey == null)
            {
                <p>
                    An API key provides you with a token that can identify you to the gallery. The
                    <a href="http://nuget.codeplex.com/">NuGet</a> command-line utility allows you to
                    submit a NuGet package to the gallery using your API key to authenticate.
                </p>
            } 
            else {
                <p>
                    Your API key provides you with a token that identifies you to the gallery.
                    Keep this a secret. You can always regenerate your key at any time (invalidating
                    previous keys) if your token is accidentally revealed. The
                    <a href="http://nuget.codeplex.com/">NuGet</a> command-line utility allows you to
                    submit a NuGet package to the gallery, and you would pass your token like this:
                </p>

                <h4>Example usage:</h4>
                <p>
                    <div id="managecreds-cred-apikeysample">
                        <div>
                            nuget.exe setApiKey @apiKey.Value
                            <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
                                    width="110"
                                    height="14"
                                    id="clippy"
                                    aria-hidden="true"
                                    role="presentation">
                                <param name="movie" value="@Url.Content("~/Content/clippy.swf")">
                                <param name="allowScriptAccess" value="always" />
                                <param name="quality" value="high" />
                                <param name="scale" value="noscale" />
                                <param name="FlashVars" value="text=nuget.exe setApiKey @apiKey.Value">
                                <param name="bgcolor" value="#202020">
                                <embed src="@Url.Content("~/Content/clippy.swf")"
                                       width="110"
                                       height="14"
                                       aria-hidden="true"
                                       role="presentation"
                                       name="clippy"
                                       quality="high"
                                       allowscriptaccess="always"
                                       type="application/x-shockwave-flash"
                                       pluginspage="http://www.macromedia.com/go/getflashplayer"
                                       flashvars="text=nuget.exe setApiKey @apiKey.Value"
                                       bgcolor="#202020" />
                            </object>
                        </div>
                        <div>nuget.exe push MyPackage.1.0.nupkg</div>
                    </div>
                </p>
            }
        </div>
    </li>
</ul>