@model ManagePackageOwnersViewModel
@{
    ViewBag.Tab = "Packages";
}
<div id="layout-main" class="group">
    <div id="layout-content" class="group">
        <div id="content" class="group">
            <div class="zone zone-content">
                <section>
                    <header>
                        <h2>Manage Owners for Package "@Model.Title"</h2>
                        <div class="message message-Error validation-summary-errors" data-bind="text: message, visible: message"></div>
                    </header>
                    <div id="form">
                        <div>
                            <label>Current Owners</label>
                            <ul id="package-owner-list" data-bind="foreach: owners">
                                <li>
                                    <span data-bind="text: name"></span>
                                    <a href="#" class="delete" data-bind="visible: !current, click: remove">Remove</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div>
                        <form action="@Url.Current()" id="form" method="post">
                            <div>
                                <label for="newOwnerUserName">Add New Owner</label>
                                <p>
                                    Enter an owner's username to add them as a package owner.
                                </p>
                                <aside style="width: 357px !important;">
                                    <p>
                                        <strong>NOTE:</strong> All package owners have full control over their packages,
                                        including the ability to remove other users as owners.</p>
                                </aside>
                                <input type="text" id="newOwnerUserName" data-bind="value: newOwner().name" class="long" />
                            </div>
                            <div class="buttons">   
                                <input type="submit" value="Add" data-bind="click: addOwner" />
                            </div>
                        </form>
                    </div>
                </section>
            </div>
    </div>
</div>
</div> 
<script src="@Url.Content("~/Scripts/knockout-latest.js")" type="text/javascript"></script>
<script src="@Url.Content("~/json/JsonApi?json")" type="text/javascript"></script>
<script type="text/javascript">
    $(function() {
        //TODO Move this to its own script file when we set up QUnit tests
        var failHandler = function() {
            alert('An unexpected error occurred!');
        };

        var viewModel = {
            package: { id: '@Model.Id', version: '@Model.Version' },
            owners: ko.observableArray([]),
            newOwner: ko.observable(new Owner(null)),
            message: ko.observable(''),
            addOwner: function() {
                var ownerInputModel = viewModel.newOwner().toJS();
                ownerInputModel.id = viewModel.package.id;
                
                $mvc.JsonApi.AddPackageOwner(ownerInputModel)
                    .done(function(data) {
                        if (data.success) {
                            viewModel.newOwner().name(data.name);
                            viewModel.owners.push(viewModel.newOwner());
                            viewModel.newOwner(new Owner(null));
                        }
                        else {
                            viewModel.message(data.message);
                        }
                    })
                    .fail(failHandler);
            },

            removeOwner: function(item) {
                var package = viewModel.package;
                $mvc.JsonApi.RemovePackageOwner({ id: package.id, version: package.version, username: item.name() })
                    .done(function(data) {
                        if (data.success) {
                            viewModel.owners.remove(item);
                        }
                        else {
                            viewModel.message(data.message);
                        }
                    }).fail(failHandler);
            }
        };
        ko.applyBindings(viewModel);

        // Load initial owners.
        $mvc.JsonApi.GetPackageOwners(viewModel.package)
        .done(function(data) {
            viewModel.owners($.map(data, function(item) { return new Owner(item) }));
        })
        .fail(failHandler);

        function Owner(item) {
            var $this = this;

            item = item || {};

            this.name = ko.observable(item.name);
            this.current = item.current;
            this.remove = function() {
                viewModel.removeOwner(this);
            };
            this.toJS = function() {
                return { username: this.name() };
            };
        }
    });
</script>